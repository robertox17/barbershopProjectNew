{"ast":null,"code":"var _jsxFileName = \"/Users/school/Desktop/barbershopProjectNew/client/src/pages/Admin/index.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\n// import '../../../styles/appointments/styles.css'\n// Import the `useQuery()` hook from Apollo Client\nimport { useQuery } from '@apollo/client';\nimport AppointmentsList from './AppointmentsList';\n\n// Import the query we are going to execute from its file\nimport { GET_APPOINTMENTS } from '../../utils/queries';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Admin() {\n  _s();\n  const {\n    loading,\n    data\n  } = useQuery(GET_APPOINTMENTS);\n\n  // Use optional chaining to check if data exists and if it has a thoughts property. If not, return an empty array to use.\n\n  const Appointments = (data === null || data === void 0 ? void 0 : data.me.appointments) || [];\n  console.log(Appointments);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(AppointmentsList, {\n          appointments: Appointments,\n          title: \"Appointments for the day\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(Admin, \"HasvTXHwlBNedvPpf4Gl00Z2xbw=\", false, function () {\n  return [useQuery];\n});\n_c = Admin;\nexport default Admin;\nvar _c;\n$RefreshReg$(_c, \"Admin\");","map":{"version":3,"names":["React","useQuery","AppointmentsList","GET_APPOINTMENTS","Admin","loading","data","Appointments","me","appointments","console","log"],"sources":["/Users/school/Desktop/barbershopProjectNew/client/src/pages/Admin/index.js"],"sourcesContent":["import React from 'react';\n// import '../../../styles/appointments/styles.css'\n// Import the `useQuery()` hook from Apollo Client\nimport { useQuery } from '@apollo/client';\n\nimport AppointmentsList from './AppointmentsList';\n\n// Import the query we are going to execute from its file\nimport { GET_APPOINTMENTS } from '../../utils/queries';\n\nfunction Admin() {\n  const { loading, data } = useQuery(GET_APPOINTMENTS);\n\n  // Use optional chaining to check if data exists and if it has a thoughts property. If not, return an empty array to use.\n  \n  const Appointments  = data?.me.appointments || [];\n\n  console.log(Appointments);\n\n  return (\n    <main>\n      <div >\n        <div >\n          {/* If the data is still loading, render a loading message */}\n          {loading ? (\n            <div>Loading...</div>\n          ) : (\n            <AppointmentsList\n            appointments={Appointments}\n            title='Appointments for the day'\n            />\n          )}\n        </div>\n      </div>\n    </main>\n  );\n}\n\nexport default Admin"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB;AACA;AACA,SAASC,QAAQ,QAAQ,gBAAgB;AAEzC,OAAOC,gBAAgB,MAAM,oBAAoB;;AAEjD;AACA,SAASC,gBAAgB,QAAQ,qBAAqB;AAAC;AAEvD,SAASC,KAAK,GAAG;EAAA;EACf,MAAM;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGL,QAAQ,CAACE,gBAAgB,CAAC;;EAEpD;;EAEA,MAAMI,YAAY,GAAI,CAAAD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,EAAE,CAACC,YAAY,KAAI,EAAE;EAEjDC,OAAO,CAACC,GAAG,CAACJ,YAAY,CAAC;EAEzB,oBACE;IAAA,uBACE;MAAA,uBACE;QAAA,UAEGF,OAAO,gBACN;UAAA,UAAK;QAAU;UAAA;UAAA;UAAA;QAAA,QAAM,gBAErB,QAAC,gBAAgB;UACjB,YAAY,EAAEE,YAAa;UAC3B,KAAK,EAAC;QAA0B;UAAA;UAAA;UAAA;QAAA;MAEjC;QAAA;QAAA;QAAA;MAAA;IACG;MAAA;MAAA;MAAA;IAAA;EACF;IAAA;IAAA;IAAA;EAAA,QACD;AAEX;AAAC,GA1BQH,KAAK;EAAA,QACcH,QAAQ;AAAA;AAAA,KAD3BG,KAAK;AA4Bd,eAAeA,KAAK;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}